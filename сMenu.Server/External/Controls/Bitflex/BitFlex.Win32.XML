<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BitFlex.Win32</name>
    </assembly>
    <members>
        <member name="T:BitFlex.Win32.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BitFlex.Win32.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BitFlex.Win32.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:BitFlex.Win32.Constants.ABState">
            <summary>
            Application Desktop Toolbar States
            </summary>
        </member>
        <member name="T:BitFlex.Win32.Constants.ABEdge">
            <summary>
            Constant values for Application Desktop Toolbar's that define which edge of the screen the AppBar will attach to
            </summary>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABEdge.ABE_LEFT">
            <summary>
            Attaches the AppBar to the left edge of the screen
            </summary>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABEdge.ABE_TOP">
            <summary>
            Attaches the AppBar to the top edge of the screen
            </summary>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABEdge.ABE_RIGHT">
            <summary>
            Attaches the AppBar to the right edge of the screen
            </summary>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABEdge.ABE_BOTTOM">
            <summary>
            Attaches the AppBar to the bottom edge of the screen
            </summary>
        </member>
        <member name="T:BitFlex.Win32.Structures.APPBARDATA">
            <summary>
            Contains information about a system appbar message. This structure is used with the SHAppBarMessage function.
            </summary>
            <devdoc>
                <para>
                    typedef struct _AppBarData {
                      DWORD  cbSize;
                      HWND   hWnd;
                      UINT   uCallbackMessage;
                      UINT   uEdge;
                      RECT   rc;
                      LPARAM lParam;
                    } APPBARDATA, *PAPPBARDATA;
                </para>
            </devdoc>
        </member>
        <member name="T:BitFlex.Win32.Constants.ABNotification">
            <summary>
            Application Desktop Toolbar Notifications
            </summary>
            <remarks>These are put in the wParam of callback messages</remarks>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABNotification.ABN_STATECHANGE">
            <summary>
            Notifies an appbar that the taskbar's autohide or always-on-top state has changedâ€”that is, the user has selected or cleared the "Always on top" or "Auto hide" check box on the taskbar's property sheet.
            </summary>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABNotification.ABN_POSCHANGED">
            <summary>
            Notifies an appbar when an event has occurred that may affect the appbar's size and position. Events include changes in the taskbar's size, position, and visibility state, as well as the addition, removal, or resizing of another appbar on the same side of the screen.
            </summary>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABNotification.ABN_FULLSCREENAPP">
            <summary>
            Notifies an appbar when a full-screen application is opening or closing. This notification is sent in the form of an application-defined message that is set by the ABM_NEW message.
            </summary>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABNotification.ABN_WINDOWARRANGE">
            <summary>
            Notifies an appbar that the user has selected the Cascade, Tile Horizontally, or Tile Vertically command from the taskbar's shortcut menu.
            </summary>
            <remarks>lParam, TRUE means hide</remarks>
        </member>
        <member name="T:BitFlex.Win32.Structures.MARGINS">
            <summary>
            Returned by the GetThemeMargins function to define the margins of windows that have visual styles applied.
            </summary>
            <devdoc>
                <para>
                    typedef struct _MARGINS {
                      int cxLeftWidth;
                      int cxRightWidth;
                      int cyTopHeight;
                      int cyBottomHeight;
                    } MARGINS, *PMARGINS
                </para>
            </devdoc>
        </member>
        <member name="T:BitFlex.Win32.Structures.RECT">
            <summary>
            The RECT structure defines the coordinates of the upper-left and lower-right corners of a rectangle.
            </summary>
            <devdoc>
                <para>
                    typedef struct _RECT {
                      LONG left;
                      LONG top;
                      LONG right;
                      LONG bottom;
                    } RECT, *PRECT;
                </para>
            </devdoc>
            <remarks>
            By convention, the right and bottom edges of the rectangle are normally considered exclusive. In other words, the pixel 
            whose coordinates are ( right, bottom ) lies immediately outside of the rectangle. For example, when RECT is passed to 
            the FillRect function, the rectangle is filled up to, but not including, the right column and bottom row of pixels. 
            This structure is identical to the RECTL structure.
            </remarks>
        </member>
        <member name="T:BitFlex.Win32.NativeMethods">
            <summary>
            Class that provides Native/Win32 Platform Invoke Signatures/Methods
            </summary>
        </member>
        <member name="M:BitFlex.Win32.NativeMethods.DwmExtendFrameIntoClientArea(System.IntPtr,BitFlex.Win32.Structures.MARGINS@)">
            <summary>
            
            </summary>
            <param name="hWnd">The handle to the window in which the frame will be extended into the client area.</param>
            <param name="margins">A pointer to a <see cref="T:BitFlex.Win32.Structures.MARGINS">MARGINS</see> structure that describes the margins to use when extending the frame into the client area.</param>
        </member>
        <member name="M:BitFlex.Win32.NativeMethods.DwmIsCompositionEnabled">
            <summary>
            Obtains a value that indicates whether Desktop Window Manager (DWM) composition is enabled. Applications can listen for composition state changes by handling the WM_DWMCOMPOSITIONCHANGED notification.
            </summary>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:BitFlex.Win32.NativeMethods.GetSystemMetrics(System.Int32)">
            <summary>
            Retrieves the specified system metric or system configuration setting.
            </summary>
            <param name="nIndex">The system metric or configuration setting to be retrieved. This parameter can be one of the following values. Note that all SM_CX* values are widths and all SM_CY* values are heights. Also note that all settings designed to return Boolean data represent TRUE as any nonzero value, and FALSE as a zero value.</param>
            <returns>
            int
            If the function succeeds, the return value is the requested system metric or configuration setting.
            If the function fails, the return value is 0. GetLastError does not provide extended error information.
            </returns>
        </member>
        <member name="M:BitFlex.Win32.NativeMethods.GetWindowRect(System.IntPtr,BitFlex.Win32.Structures.RECT@)">
            <summary>
            Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="lpRect">A pointer to a RECT structure that receives the screen coordinates of the upper-left and lower-right corners of the window.</param>
            <returns>
            BOOL
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:BitFlex.Win32.NativeMethods.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Changes the position and dimensions of the specified window. For a top-level window, the position and dimensions are relative to the upper-left corner of the screen. For a child window, they are relative to the upper-left corner of the parent window's client area.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="X">The new position of the left side of the window.</param>
            <param name="Y">The new position of the top of the window.</param>
            <param name="nWidth">The new width of the window.</param>
            <param name="nHeight">The new height of the window.</param>
            <param name="bRepaint">Indicates whether the window is to be repainted. If this parameter is TRUE, the window receives a message. If the parameter is FALSE, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of moving a child window.</param>
            <returns>
            BOOL
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:BitFlex.Win32.NativeMethods.RegisterWindowMessage(System.String)">
            <summary>
            Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.
            </summary>
            <param name="lpString">The message to be registered.</param>
            <returns>
            UINT
            If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            The RegisterWindowMessage function is typically used to register messages for communicating between two cooperating applications. 
            
            If two different applications register the same message string, the applications return the same message value. The message 
            remains registered until the session ends. 
            
            Only use RegisterWindowMessage when more than one application must process the same message. For sending private messages within 
            a window class, an application can use any integer in the range WM_USER through 0x7FFF. (Messages in this range are private to a 
            window class, not to an application. For example, predefined control classes such as BUTTON, EDIT, LISTBOX, and COMBOBOX may use 
            values in this range.)
            </remarks>
        </member>
        <member name="M:BitFlex.Win32.NativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="hWndInsertAfter">A handle to the window to precede the positioned window in the Z order. This parameter must be a window handle or one of the following values.</param>
            <param name="X">The new position of the left side of the window, in client coordinates.</param>
            <param name="Y">The new position of the top of the window, in client coordinates.</param>
            <param name="cx">The new width of the window, in pixels.</param>
            <param name="cy">The new height of the window, in pixels.</param>
            <param name="uFlags">The window sizing and positioning flags. This parameter can be a combination of the following values.</param>
            <returns>
            BOOL
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:BitFlex.Win32.NativeMethods.SHAppBarMessage(System.Int32,BitFlex.Win32.Structures.APPBARDATA@)">
            <summary>
            Sends an appbar message to the system.
            </summary>
            <param name="dwMessage">Appbar message value to send.</param>
            <param name="pData">The address of an APPBARDATA structure. The content of the structure on entry and on exit depends on the value set in the dwMessage parameter.</param>
            <returns>
            UINT_PTR
            This function returns a message-dependent value. For more information, see the Windows SDK documentation for the specific appbar message sent.
            </returns>
        </member>
        <member name="T:BitFlex.Win32.Constants.ABMessage">
            <summary>
            Defines the constant values that represent various Application Desktop Toolbar messages sent and received by the Windows Shell
            </summary>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABMessage.ABM_NEW">
            <summary>
            Registers a new appbar and specifies the message identifier that the system should use to send it notification messages. An appbar should send this message before sending any other appbar messages.
            </summary>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABMessage.ABM_REMOVE">
            <summary>
            Unregisters an appbar by removing it from the system's internal list. The system no longer sends notification messages to the appbar or prevents other applications from using the screen area occupied by the appbar.
            </summary>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABMessage.ABM_QUERYPOS">
            <summary>
            Requests a size and screen position for an appbar. When the request is made, the message proposes a screen edge and a bounding rectangle for the appbar. The system adjusts the bounding rectangle so that the appbar does not interfere with the Windows taskbar or any other appbars.
            </summary>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABMessage.ABM_SETPOS">
            <summary>
            Sets the size and screen position of an appbar. The message specifies a screen edge and the bounding rectangle for the appbar. The system may adjust the bounding rectangle so that the appbar does not interfere with the Windows taskbar or any other appbars.
            </summary>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABMessage.ABM_GETSTATE">
            <summary>
            Retrieves the autohide and always-on-top states of the Windows taskbar.
            </summary>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABMessage.ABM_GETTASKBARPOS">
            <summary>
            Retrieves the bounding rectangle of the Windows taskbar.
            </summary>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABMessage.ABM_ACTIVATE">
            <summary>
            Notifies the system that an appbar has been activated. An appbar should call this message in response to the WM_ACTIVATE message.
            </summary>
            <remarks>lParam, TRUE means activate, FALSE means deactivate</remarks>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABMessage.ABM_GETAUTOHIDEBAR">
            <summary>
            Retrieves the handle to the autohide appbar associated with an edge of the screen.
            </summary>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABMessage.ABM_SETAUTOHIDEBAR">
            <summary>
            Registers or unregisters an autohide appbar for an edge of the screen.
            </summary>
            <remarks>This can fail at any time. You MUST check the result. lParam, TRUE means set, false means unset. uEdge is which edge.</remarks>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABMessage.ABM_WINDOWPOSCHANGED">
            <summary>
            Notifies the system when an appbar's position has changed. An appbar should call this message in response to the WM_WINDOWPOSCHANGED message.
            </summary>
        </member>
        <member name="F:BitFlex.Win32.Constants.ABMessage.ABM_SETSTATE">
            <summary>
            Sets the autohide and always-on-top states of the Windows taskbar.
            </summary>
        </member>
    </members>
</doc>
